#!/usr/bin/env ruby

$LOAD_PATH << File.expand_path('../../lib/', __FILE__)

require 'optparse'
require 'tallyit'
require 'rainbow'

options = {
  :storage_file => File.absolute_path('.tallyit.txt', ENV['HOME']),
  :type => 'expend',
  :format => 'table'
}

option_parser = OptionParser.new do |opts|
  executable_name = File.basename($PROGRAM_NAME)
  opts.banner = "Usage: #{executable_name} [options] <command>"

  opts.separator ""
  opts.separator "Specific options:"

  opts.on('-i', '--[no-]income', 'Tally type flag, income or expend') do |income|
    options[:type] = 'income' if income
  end
  opts.on('-a AMOUNT', '--amount AMOUNT', Numeric, 'Require a numeric amount') do |amount|
    options[:amount] = amount.round(2)
  end
  opts.on('-m MSG', '--message MSG', 'Set message about the tally') do |msg|
    options[:msg] = msg
  end
  opts.on('-l LINE', '--line LINE', Integer, 'Choose the lineno to delete') do |line|
    options[:line] = line
  end
  opts.on('--format FORMAT', 'Set the output format "table" or "raw", default: "table"') do |format|
    options[:format] = format
  end

  opts.separator ""
  opts.separator "Common options:"

  opts.on_tail('-h', '--help', 'Show help message') do
    puts opts
    exit
  end
  opts.on_tail('-v', '--version', 'Show version') do
    puts Tallyit::VERSION
    exit
  end
end

begin
  option_parser.parse!
  if ARGV.empty?
    STDERR.puts Rainbow("Error: you should supply a command").red.inverse
    STDERR.puts option_parser
    exit 1
  else
    command = ARGV.shift
    all_commands = %w(add delete stat)
    raise OptionParser::InvalidArgument.new("#{command}") unless all_commands.include?(command)
  end
rescue OptionParser::InvalidArgument => ex
  STDERR.puts Rainbow(ex.message).red.inverse
  STDERR.puts option_parser
  exit 1
end

Tally = Struct.new(:type, :amount, :msg)
tally = Tally.new(options[:type], options[:amount], options[:msg])
case command
when 'add'
  Tallyit.add(tally, options[:storage_file])
when 'delete'
  Tallyit.delete(options[:storage_file], options[:line])
when 'stat'
  Tallyit.stat(options[:storage_file], options[:format])
end

